{"version":3,"sources":["Components/Search.js","Components/AllPictures.js","Components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Search","searchInput","searchButton","searchEnter","className","type","placeholder","onChange","onKeyPress","onClick","AllPictures","props","href","pictures","largeImageURL","target","rel","src","alt","tags","Pagination","pageNumbers","i","Math","ceil","totalPictures","picturesPerPage","push","map","value","key","paginate","App","useState","search","results","select","currentPage","totalHits","state","setState","API_KEY","indexOfLastPicture","indexOfFirstPicture","currentPictures","slice","e","searchPicture","prevState","axios","process","then","data","resultPictures","hits","totalHitsOfPictures","console","log","event","resultPicturesWithEnter","id","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.31cdcf66.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Search = ({searchInput, searchButton, searchEnter}) => {\r\n    return(\r\n        <div className=\"searchBox\">\r\n            <input \r\n                type=\"text\" \r\n                placeholder=\"Search for a picture\" \r\n                onChange={searchInput}\r\n                onKeyPress={searchEnter}\r\n            />\r\n            <button type=\"submit\" onClick={searchButton}>Search</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst AllPictures = (props) => {\r\n\r\n    return (\r\n        <div className=\"picture\">\r\n            <a href={props.pictures.largeImageURL} target='_blank' rel=\"noopener noreferrer nofollow\">\r\n                <img src={props.pictures.largeImageURL} alt={props.pictures.tags} />\r\n            </a>\r\n            <h2>{props.pictures.tags}</h2>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default AllPictures;\r\n\r\n","import React from 'react';\r\n\r\nconst Pagination = (props) => {\r\n\r\n    const pageNumbers = [];\r\n\r\n    // Boucle pour savoir combien de pages sont nécessaire (dans notre cas, c'est state.result.length(100) / state.picturesPerPage(10))\r\n    for(let i = 1; i <= Math.ceil(props.totalPictures / props.picturesPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return(\r\n        <div className=\"navPagination\">\r\n            <nav>\r\n                <ul>\r\n                    {pageNumbers.map(value =>(\r\n                        <li key={value}>\r\n                            <a \r\n                                onClick={() => props.paginate(value)} href=\"#\"\r\n                                className='listPages'\r\n                            >\r\n                                {value}\r\n                            </a>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination;","import React, {useState} from 'react';\nimport './App.css';\n\nimport Search from './Components/Search';\nimport AllPictures from './Components/AllPictures';\nimport Pagination from './Components/Pagination';\n\nimport axios from 'axios';\n\nconst App = () => {\n\n  // Création d'un objet state avec des propriétés vides :\n  const [state, setState] = useState({\n    search: '',\n    results: [],\n    select: {},\n    currentPage: (1),\n    picturesPerPage: (10),\n    totalHits: '',\n  })\n\n  // Clé API de Pixabay\n  const API_KEY = \"https://pixabay.com/api/?key=\" + process.env.REACT_APP_API_KEY\n\n  \n\n  // le champs input : \n  const searchInput = (e) => {\n    let searchPicture = e.target.value;\n    // on récupère l'ancienne valeur et on l'a change avec la nouveau valeur qu'on récupère avec e.target.value :\n    setState(prevState => {\n      return {...prevState, search : searchPicture}\n    });\n    // console.log(state.search);\n  }\n  \n  // la fonction rechercher avec le button :\n  /*\n  const searchButton = async () => {\n    const response = await fetch(API_KEY + \"&q=\" + state.search + picturePerPage);\n    const data = await response.json();\n    setState(prevState => {\n      return{...prevState, results : data.hits}\n    })\n  }\n  */\n\n  const nbrTotalOfPicture = process.env.REACT_APP_PICTURES_NUMBER;\n\n  const searchButton = () => {\n   // Un array data.data.hits pour récupèrer les images depuis cette API (on peut mettre le paramètre data de la méthode then entre accolade pour acceder à la deuxième dimension du array et puis seulement affecter data.hits à la variable resultPictures)\n    axios(API_KEY + \"&q=\" + state.search + nbrTotalOfPicture ).then((data) => {\n      let resultPictures = data.data.hits;\n      let totalHitsOfPictures = data.data.totalHits;\n      console.log(totalHitsOfPictures);\n      console.log(resultPictures);\n\n      // on récupère les informations de data.hits qu'on stocke dans une variable et puis on l'affecte à la propriété results de l'objet state qui est un tableau vide par défaut. \n      setState(prevState => {\n        return {...prevState, results : resultPictures, totalHits : totalHitsOfPictures}\n      })\n    })\n  }\n\n  const searchEnter = (event) => {\n    if (event.key === 'Enter') {\n      axios(API_KEY + \"&q=\" + state.search + nbrTotalOfPicture ).then(({data}) => {\n        let resultPicturesWithEnter = data.hits;\n        let totalHitsOfPictures = data.totalHits;\n        console.log(resultPicturesWithEnter);\n        // console.log(totalHitsOfPictures);\n\n        setState(prevState => {\n          return {...prevState, results : resultPicturesWithEnter, totalHits: totalHitsOfPictures}\n        })\n      })\n    }\n  }\n\n  // Pagination : \n  const indexOfLastPicture = state.currentPage * state.picturesPerPage;\n  const indexOfFirstPicture = indexOfLastPicture - state.picturesPerPage;\n  const currentPictures = state.results.slice(indexOfFirstPicture, indexOfLastPicture);\n\n  // Changer de page : \n  //  pageNumbers vient de pagination.js \n  const paginate = (pageNumbers) => {\n    setState(prevState => {\n      return{...prevState, currentPage : pageNumbers}\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Picture React App with pagination using Pixabay's API </h1>\n        <Search searchInput={searchInput} searchButton={searchButton} searchEnter={searchEnter} />\n      </header>\n\n      <main>\n\n        {  (state.totalHits !== 0 ) ?\n          <div className=\"allPictures\">\n            {currentPictures.map(value =>(\n              (<AllPictures key={value.id} pictures={value}/>) \n              \n            ))}\n          </div>\n        : (<p className=\"errorPictures\">Picture not available</p>) } \n\n        <Pagination \n          totalPictures={state.results.length} \n          picturesPerPage={state.picturesPerPage} \n          paginate={paginate} \n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}